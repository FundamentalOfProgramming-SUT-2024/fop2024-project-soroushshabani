#include <ncurses.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>
#include <string.h>

// تنظیمات اتاق‌ها
#define MAX_ROOMS 6
#define MIN_ROOM_WIDTH 6
#define MAX_ROOM_WIDTH 15
#define MIN_ROOM_HEIGHT 6
#define MAX_ROOM_HEIGHT 8
#define ROOM_PADDING 2
#define MAX_PILLARS 3
#define MAX_ROWS 100
#define MAX_COLS 100
#define MAX_INVENTORY_ITEMS 100
#define ITEM_NAME_LENGTH 50
#define MACE_ICON "🪢"    // شلاق
#define DAGGER_ICON "📌"  // خنجر
#define WAND_ICON "🪄"    // چوب جادو
#define ARROW_ICON "🏹"   // تیر و کمان
#define SWORD_ICON "🗡"    // شمشیر
#define speed_ICON "🏃‍♂️"    // شمشیر
#define health_ICON "❤️"    // شمشیر
#define damage_ICON "🔥"    // شمشیر
// نقشه بازی (صفحه نمایش که روی آن همه چیز رسم می‌شود)
typedef struct {
    int x, y;
    int width, height;
} Room;
typedef struct {
    char name[ITEM_NAME_LENGTH];
    char type[ITEM_NAME_LENGTH]; // نوع آیتم مانند غذا، اسلحه، طلسم
} Item;

Item inventory[MAX_INVENTORY_ITEMS];
int inventory_count = 0;
char current_message[100] = ""; // متغیری برای ذخیره پیام فعلی
char map[MAX_ROWS][MAX_COLS];
char trap_map[MAX_ROWS][MAX_COLS]; // نقشه تله‌ها
char gold_message[50] = "";
int gold_count = 0;
int player_hp = 40;
int placed_food = 0; // شمارش غذای قرار داده شده
int hunger = 100;     // سطح گرسنگی (از 100 کاهش می‌یابد)
int food_count = 0;   // تعداد غذاهای همراه بازیکن
// بررسی تداخل اتاق‌ها
int check_overlap(Room new_room, Room rooms[], int count) {
    for (int i = 0; i < count; i++) {
        if (new_room.x < rooms[i].x + rooms[i].width + ROOM_PADDING &&
            new_room.x + new_room.width > rooms[i].x - ROOM_PADDING &&
            new_room.y < rooms[i].y + rooms[i].height + ROOM_PADDING &&
            new_room.y + new_room.height > rooms[i].y - ROOM_PADDING) {
            return 1;
        }
    }
    return 0;
}

// تولید اتاق‌ها
void create_rooms(Room rooms[], int count) {
    for (int i = 0; i < count; i++) {
        Room new_room;
        new_room.width = rand() % (MAX_ROOM_WIDTH - MIN_ROOM_WIDTH + 1) + MIN_ROOM_WIDTH;
        new_room.height = rand() % (MAX_ROOM_HEIGHT - MIN_ROOM_HEIGHT + 1) + MIN_ROOM_HEIGHT;
        do {
            new_room.x = rand() % (COLS - new_room.width - 3);
            new_room.y = rand() % (LINES - new_room.height - 3);
        } while (check_overlap(new_room, rooms, i));
        rooms[i] = new_room;
    }
}

// بررسی وجود اتاق در سمت مورد نظر
int room_in_direction(Room room, Room rooms[], int count, char direction) {
    for (int i = 0; i < count; i++) {
        switch (direction) {
            case 'U': // بالا
                if (room.x < rooms[i].x + rooms[i].width &&
                    room.x + room.width > rooms[i].x &&
                    room.y > rooms[i].y + rooms[i].height) {
                    return 1;
                }
                break;
            case 'D': // پایین
                if (room.x < rooms[i].x + rooms[i].width &&
                    room.x + room.width > rooms[i].x &&
                    room.y + room.height < rooms[i].y) {
                    return 1;
                }
                break;
            case 'L': // چپ
                if (room.y < rooms[i].y + rooms[i].height &&
                    room.y + room.height > rooms[i].y &&
                    room.x > rooms[i].x + rooms[i].width) {
                    return 1;
                }
                break;
            case 'R': // راست
                if (room.y < rooms[i].y + rooms[i].height &&
                    room.y + room.height > rooms[i].y &&
                    room.x + room.width < rooms[i].x) {
                    return 1;
                }
                break;
        }
    }
    return 0;
}

// تابع برای قرار دادن پنجره در دیوار اتاق
void place_window_in_room(Room *room, Room rooms[], int count) {
    int window_x = 0, window_y = 0;
    int side = rand() % 4; // انتخاب یک طرف (بالا، پایین، چپ یا راست)

    // انتخاب دیوار مناسب برای قرار دادن پنجره
    if (side == 0) { // دیوار بالایی
        window_x = room->x + 1 + rand() % (room->width - 2);
        window_y = room->y;
    } else if (side == 1) { // دیوار پایینی
        window_x = room->x + 1 + rand() % (room->width - 2);
        window_y = room->y + room->height - 1;
    } else if (side == 2) { // دیوار چپ
        window_x = room->x;
        window_y = room->y + 1 + rand() % (room->height - 2);
    } else { // دیوار راست
        window_x = room->x + room->width - 1;
        window_y = room->y + 1 + rand() % (room->height - 2);
    }

    // اطمینان از اینکه پنجره در یک موقعیت معتبر قرار گیرد
    if (map[window_y][window_x] == '+' || map[window_y][window_x] == '=') {
        return; // اگر جای پنجره قبلاً اشغال شده باشد، از آن صرف نظر کن
    }

    // اگر اتاق در جهت پنجره وجود داشته باشد، آن را نمایش بده
    if (room_in_direction(*room, rooms, count, side)) {
        map[window_y][window_x] = '='; // نمای پنجره در نقشه
    }
}

// رسم اتاق
void draw_room(Room room, Room rooms[], int count) {
    for (int i = 0; i < room.height; i++) {
        for (int j = 0; j < room.width; j++) {
            int cur_x = room.x + j;
            int cur_y = room.y + i;
            if (i == 0 || i == room.height - 1 || j == 0 || j == room.width - 1) {
                // اگر در موقعیت دیوار بالایی، پایینی، چپ یا راست باشیم
                if (j == room.width / 2 && i == 0 && room_in_direction(room, rooms, count, 'U')) {
                    mvaddch(cur_y, cur_x, '='); // پنجره در بالای اتاق
                } else if (j == room.width / 2 && i == room.height - 1 && room_in_direction(room, rooms, count, 'D')) {
                    mvaddch(cur_y, cur_x, '='); // پنجره در پایین اتاق
                } else if (i == room.height / 2 && j == 0 && room_in_direction(room, rooms, count, 'L')) {
                    mvaddch(cur_y, cur_x, '='); // پنجره در سمت چپ اتاق
                } else if (i == room.height / 2 && j == room.width - 1 && room_in_direction(room, rooms, count, 'R')) {
                    mvaddch(cur_y, cur_x, '='); // پنجره در سمت راست اتاق
                } else {
                    mvaddch(cur_y, cur_x, (i == 0 || i == room.height - 1) ? '-' : '|');
                }
            } else {
                mvaddch(cur_y, cur_x, '.');
            }
        }
    }
}

// **اضافه کردن ستون‌های تصادفی داخل اتاق‌ها**
void add_pillars(Room room) {
    int num_pillars = rand() % (MAX_PILLARS + 1); // ۰ تا ۳ ستون در هر اتاق
    for (int i = 0; i < num_pillars; i++) {
        int pillar_x, pillar_y;
        do {
            pillar_x = room.x + 1 + rand() % (room.width - 2);
            pillar_y = room.y + 1 + rand() % (room.height - 2);
        } while (mvinch(pillar_y, pillar_x) != '.'); // جلوگیری از قرارگیری روی دیوار
        attron(COLOR_PAIR(3)); // استفاده از رنگ قرمز برای تله‌ها

        mvaddch(pillar_y, pillar_x, 'O'); // نمایش ستون
        attroff(COLOR_PAIR(3)); // استفاده از رنگ قرمز برای تله‌ها

    }
}

// رسم در
void draw_door(int door_x, int door_y) {
    mvaddch(door_y, door_x, '+');
}

// بررسی اینکه یک نقطه داخل اتاق است
int is_point_inside_room(int x, int y, Room room) {
    return (x >= room.x && x < room.x + room.width &&
            y >= room.y && y < room.y + room.height);
}

// بررسی مسیر راهرو
int corridor_clear(int sx, int sy, int ex, int ey, int cy, Room rooms[], int count) {
    int step;
    for (int i = 0; i < count; i++) {
        if (is_point_inside_room(sx, cy, rooms[i]) || is_point_inside_room(ex, cy, rooms[i]))
            return 0;
    }
    step = (sy < cy) ? 1 : -1;
    for (int y = sy; y != cy; y += step)
        for (int i = 0; i < count; i++)
            if (is_point_inside_room(sx, y, rooms[i]))
                return 0;

    step = (sx < ex) ? 1 : -1;
    for (int x = sx; x != ex; x += step)
        for (int i = 0; i < count; i++)
            if (is_point_inside_room(x, cy, rooms[i]))
                return 0;

    step = (cy < ey) ? 1 : -1;
    for (int y = cy; y != ey; y += step)
        for (int i = 0; i < count; i++)
            if (is_point_inside_room(ex, y, rooms[i]))
                return 0;

    return 1;
}
void add_traps_to_room(Room *room) {
    for (int i = 0; i < 3; i++) {
        int trap_x, trap_y;
        do {
            trap_x = room->x + 1 + rand() % (room->width - 2);
            trap_y = room->y + 1 + rand() % (room->height - 2);
        } while (trap_map[trap_y][trap_x] == 'T'); // اطمینان از اینکه تله روی تله دیگری قرار نگیرد

        map[trap_y][trap_x] = 'T'; // Mark position of gold bag in map
        attron(COLOR_PAIR(1)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(trap_y, trap_x, 'T'); // Display gold bag on screen
        attroff(COLOR_PAIR(1)); // استفاده از رنگ قرمز برای تله‌ها

    }
}

// مقداردهی اولیه به نقشه تله‌ها
void initialize_trap_map() {
    for (int i = 0; i < MAX_ROWS; i++) {
        for (int j = 0; j < MAX_COLS; j++) {
            trap_map[i][j] = ' '; // هیچ تله‌ای در ابتدا وجود ندارد
        }
    }
}

// رسم راهرو
void draw_corridor(int sx, int sy, int ex, int ey, int cy) {
    int step;
    step = (sy < cy) ? 1 : -1;
    for (int y = sy; y != cy; y += step)
        mvaddch(y, sx, '#');
    mvaddch(cy, sx, '#');

    step = (sx < ex) ? 1 : -1;
    for (int x = sx; x != ex; x += step)
        mvaddch(cy, x, '#');
    mvaddch(cy, ex, '#');

    step = (cy < ey) ? 1 : -1;
    for (int y = cy; y != ey; y += step)
        mvaddch(y, ex, '#');
    mvaddch(ey, ex, '#');
}

// اتصال اتاق‌ها
int connect_rooms(Room roomA, Room roomB, Room rooms[], int total_rooms) {
    int doorA_x = roomA.x + roomA.width - 1;
    int doorA_y = roomA.y + roomA.height / 2;
    int doorB_x = roomB.x;
    int doorB_y = roomB.y + roomB.height / 2;

    int corridor_start_x = doorA_x + 1;
    int corridor_start_y = doorA_y;
    int corridor_end_x = doorB_x - 1;
    int corridor_end_y = doorB_y;

    int cy = (corridor_start_y + corridor_end_y) / 2;

    if (corridor_clear(corridor_start_x, corridor_start_y, corridor_end_x, corridor_end_y, cy, rooms, total_rooms)) {
        draw_door(doorA_x, doorA_y);
        draw_door(doorB_x, doorB_y);
        draw_corridor(corridor_start_x, corridor_start_y, corridor_end_x, corridor_end_y, cy);
        return 1;
    }
    return 0;
}

// اطمینان از اتصال کامل اتاق‌ها
// اطمینان از اتصال کامل اتاق‌ها
void ensure_full_connectivity(Room rooms[], int total_rooms) {
    int visited[MAX_ROOMS] = {0};
    int stack[MAX_ROOMS];
    int stack_top = -1;

    // شروع DFS از اولین اتاق
    stack[++stack_top] = 0;
    visited[0] = 1;

    while (stack_top >= 0) {
        int current = stack[stack_top--];

        for (int i = 0; i < total_rooms; i++) {
            if (!visited[i] && connect_rooms(rooms[current], rooms[i], rooms, total_rooms)) {
                visited[i] = 1;
                stack[++stack_top] = i;
            }
        }
    }

    // بررسی اتاق‌های جدا
    for (int i = 0; i < total_rooms; i++) {
        if (!visited[i]) {
            // اتصال اتاق جدا به یک اتاق تصادفی متصل
            for (int j = 0; j < total_rooms; j++) {
                if (visited[j]) {
                    connect_rooms(rooms[i], rooms[j], rooms, total_rooms);
                    visited[i] = 1;
                    break;
                }
            }
        }
    }
}


// متغیر جدید برای حالت حرکت
int waiting_for_direction = 0;
int move_direction_x = 0, move_direction_y = 0;

// تابع برای شروع حرکت مداوم در جهت مشخص
void start_continuous_move(int x_dir, int y_dir) {
    move_direction_x = x_dir;
    move_direction_y = y_dir;
    waiting_for_direction = 0;  // پایان حالت انتظار
}

void add_gold_bag_to_room(Room *room) {
    for (int i = 0; i < 1; i++) { // Add 1 gold bag per room
        int gold_bag_x, gold_bag_y;
        do {
            gold_bag_x = room->x + 1 + rand() % (room->width - 2);
            gold_bag_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[gold_bag_y][gold_bag_x] == '&'); // Ensure we don't place gold bag on another gold bag

        map[gold_bag_y][gold_bag_x] = '&'; // Mark position of gold bag in map
        attron(COLOR_PAIR(2)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(gold_bag_y, gold_bag_x, '&'); // Display gold bag on screen
        attroff(COLOR_PAIR(2)); // استفاده از رنگ قرمز برای تله‌ها

    }
}
void add_food_to_room(Room *room) {
    for (int i = 0; i < 1; i++) { // 33% شانس برای قرار دادن غذا در اتاق
        int food_x, food_y;
        do {
            food_x = room->x + 1 + rand() % (room->width - 2);
            food_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[food_y][food_x] == 'f'); // بررسی عدم قرارگیری روی غذا دیگر

        map[food_y][food_x] = 'f'; // علامت‌گذاری غذا در نقشه
        attron(COLOR_PAIR(6)); // رنگ غذا (سبز)
        mvaddch(food_y, food_x, 'f');
        attroff(COLOR_PAIR(6));
    }
}
void show_status() {
    mvprintw(1, 0, "❤️ Health: %d  🍽 Hunger: %d  🍎 Food: %d", player_hp, hunger, food_count);
    refresh();
}
void add_food_to_inventory() {
    if (food_count < 5) { // حداکثر ۵ واحد غذا
        food_count++;
        mvprintw(0, 0, "You picked up 🍎 Food! Total: %d", food_count);
    } else {
        mvprintw(0, 0, "You can't carry more food!");
    }
    refresh();
}
void decrease_hunger() {
    if (hunger > 0) {
        hunger--;
    } else {
        player_hp -= 2; // اگر گرسنگی به ۰ برسد، سلامت کاهش می‌یابد
        if (player_hp <= 0) {
            mvprintw(0, 0, "You died from hunger! Game Over!");
            refresh();
            getch();
            endwin();
            exit(0);
        }
    }
}
void consume_food() {
    if (food_count > 0) {
        food_count--;
        hunger += 20; // کاهش گرسنگی
        if (hunger > 100) hunger = 100;
        player_hp += 10; // افزایش سلامت
        if (player_hp > 40) player_hp = 40;

        mvprintw(0, 0, "You ate 🍎 Food! Health: %d, Hunger: %d", player_hp, hunger);
    } else {
        mvprintw(0, 0, "No food to eat!");
    }
    refresh();
}
void add_mace_to_room(Room *room) {
    int mace_x, mace_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 'M') {
                return; // A wand is already placed, exit the function
            }
        }
    }
        do {
            mace_x = room->x + 1 + rand() % (room->width - 2);
            mace_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[mace_y][mace_x] == 'M'); // Ensure we don't place gold bag on another gold bag

        map[mace_y][mace_x] = 'M'; // Mark position of gold bag in map
        attron(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(mace_y, mace_x, 'M'); // Display gold bag on screen
        attroff(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها

    }

void add_dagger_to_room(Room *room) {
    int dagger_x, dagger_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 'D') {
                return; // A wand is already placed, exit the function
            }
        }
    }
        do {
            dagger_x = room->x + 1 + rand() % (room->width - 2);
            dagger_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[dagger_y][dagger_x] == 'D'); // Ensure we don't place gold bag on another gold bag

        map[dagger_y][dagger_x] = 'D'; // Mark position of gold bag in map
        attron(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(dagger_y, dagger_x, 'D'); // Display gold bag on screen
        attroff(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها

    }

void add_arrow_to_room(Room *room) {
    int arrow_x, arrow_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 'A') {
                return; // A wand is already placed, exit the function
            }
        }
    }
        do {
            arrow_x = room->x + 1 + rand() % (room->width - 2);
            arrow_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[arrow_y][arrow_x] == 'A'); // Ensure we don't place gold bag on another gold bag

        map[arrow_y][arrow_x] = 'A'; // Mark position of gold bag in map
        attron(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(arrow_y, arrow_x, 'A'); // Display gold bag on screen
        attroff(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها

    }

void add_sword_to_room(Room *room) {
    int sword_x, sword_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 'S') {
                return; // A wand is already placed, exit the function
            }
        }
    }
        do {
            sword_x = room->x + 1 + rand() % (room->width - 2);
            sword_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[sword_y][sword_x] == 'S'); // Ensure we don't place gold bag on another gold bag

        map[sword_y][sword_x] = 'S'; // Mark position of gold bag in map
        attron(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(sword_y, sword_x, 'S'); // Display gold bag on screen
        attroff(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها

    }

void add_wand_to_room(Room *room) {
    int wand_x, wand_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 'W') {
                return; // A wand is already placed, exit the function
            }
        }
    }
        do {
            wand_x = room->x + 1 + rand() % (room->width - 2);
            wand_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[wand_y][wand_x] == 'W'); // Ensure we don't place gold bag on another gold bag

        map[wand_y][wand_x] = 'W'; // Mark position of gold bag in map
        attron(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(wand_y, wand_x, 'W'); // Display gold bag on screen
        attroff(COLOR_PAIR(5)); // استفاده از رنگ قرمز برای تله‌ها

    }
void add_health_to_room(Room *room) {
    int sword_x, sword_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 'h') {
                return; // A wand is already placed, exit the function
            }
        }
    }
    do {
        sword_x = room->x + 1 + rand() % (room->width - 2);
        sword_y = room->y + 1 + rand() % (room->height - 2);
    } while (map[sword_y][sword_x] == 'h'); // Ensure we don't place gold bag on another gold bag

    map[sword_y][sword_x] = 'h'; // Mark position of gold bag in map
    attron(COLOR_PAIR(6)); // استفاده از رنگ قرمز برای تله‌ها
    mvaddch(sword_y, sword_x, 'h'); // Display gold bag on screen
    attroff(COLOR_PAIR(6)); // استفاده از رنگ قرمز برای تله‌ها

}
void add_speed_to_room(Room *room) {
    int sword_x, sword_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 's') {
                return; // A wand is already placed, exit the function
            }
        }
    }
    do {
        sword_x = room->x + 1 + rand() % (room->width - 2);
        sword_y = room->y + 1 + rand() % (room->height - 2);
    } while (map[sword_y][sword_x] == 's'); // Ensure we don't place gold bag on another gold bag

    map[sword_y][sword_x] = 's'; // Mark position of gold bag in map
    attron(COLOR_PAIR(6)); // استفاده از رنگ قرمز برای تله‌ها
    mvaddch(sword_y, sword_x, 's'); // Display gold bag on screen
    attroff(COLOR_PAIR(6)); // استفاده از رنگ قرمز برای تله‌ها

}
void add_damage_to_room(Room *room) {
    int sword_x, sword_y;
    for (int y = 0; y < LINES; y++) {
        for (int x = 0; x < COLS; x++) {
            if (map[y][x] == 'd') {
                return; // A wand is already placed, exit the function
            }
        }
    }
    do {
        sword_x = room->x + 1 + rand() % (room->width - 2);
        sword_y = room->y + 1 + rand() % (room->height - 2);
    } while (map[sword_y][sword_x] == 'd'); // Ensure we don't place gold bag on another gold bag

    map[sword_y][sword_x] = 'd'; // Mark position of gold bag in map
    attron(COLOR_PAIR(6)); // استفاده از رنگ قرمز برای تله‌ها
    mvaddch(sword_y, sword_x, 'd'); // Display gold bag on screen
    attroff(COLOR_PAIR(6)); // استفاده از رنگ قرمز برای تله‌ها

}
void add_black_gold_to_room(Room *room, int *black_gold_room_count) {
    // فقط اگر تعداد اتاق‌های دارای طلای سیاه کمتر از 2 باشد، طلای سیاه اضافه کن
    if (*black_gold_room_count < 2) {
        int black_gold_x, black_gold_y;
        do {
            black_gold_x = room->x + 1 + rand() % (room->width - 2);
            black_gold_y = room->y + 1 + rand() % (room->height - 2);
        } while (map[black_gold_y][black_gold_x] == 'B'); // Ensure we don't place black gold on another black gold

        map[black_gold_y][black_gold_x] = 'B'; // Place black gold in the map
        attron(COLOR_PAIR(4)); // استفاده از رنگ قرمز برای تله‌ها
        mvaddch(black_gold_y, black_gold_x, 'B'); // Display black gold on screen
        attroff(COLOR_PAIR(4)); // استفاده از رنگ قرمز برای تله‌ها

        (*black_gold_room_count)++; // افزایش شمارنده اتاق‌های دارای طلای سیاه
    }
}

void add_to_inventory(const char* item_name, const char* item_type) {
    for (int i = 0; i < inventory_count; i++) {
        if (strcmp(inventory[i].name, item_name) == 0 && strcmp(inventory[i].type, item_type) == 0) {
            return; // آیتم قبلاً در اینونتوری وجود دارد
        }
    }

    if (inventory_count < MAX_INVENTORY_ITEMS) {
        strncpy(inventory[inventory_count].name, item_name, ITEM_NAME_LENGTH - 1);
        strncpy(inventory[inventory_count].type, item_type, ITEM_NAME_LENGTH - 1);
        inventory_count++;

        // نمایش پیام برداشتن آیتم همراه با استیکر صحیح
        const char* icon = "";
        if (strcmp(item_name, "Mace") == 0) icon = MACE_ICON;
        else if (strcmp(item_name, "Dagger") == 0) icon = DAGGER_ICON;
        else if (strcmp(item_name, "Wand") == 0) icon = WAND_ICON;
        else if (strcmp(item_name, "Arrow") == 0) icon = ARROW_ICON;
        else if (strcmp(item_name, "Sword") == 0) icon = SWORD_ICON;

        snprintf(current_message, sizeof(current_message), "You picked up %s %s", icon, item_name);
        mvprintw(0, 0, current_message); // نمایش پیام در بالای صفحه
        refresh();
    }
}
void show_inventory() {
    int start_x = COLS - 30; // موقعیت افقی برای شروع نمایش
    int start_y = 0;

    // پاک کردن بخش اینونتوری بدون حذف نقشه
    for (int i = 0; i < LINES; i++) {
        move(i, start_x);
        clrtoeol();
    }

    // نمایش اینونتوری
    mvprintw(start_y, start_x, "📦 Inventory:\n");
    mvprintw(start_y + 1, start_x, "🔫 Weapons:\n");

    int weapon_count = 0;
    for (int i = 0; i < inventory_count; i++) {
        if (strcmp(inventory[i].type, "Weapon") == 0) {
            const char* icon = "";

            if (strcmp(inventory[i].name, "Mace") == 0) icon = MACE_ICON;
            else if (strcmp(inventory[i].name, "Dagger") == 0) icon = DAGGER_ICON;
            else if (strcmp(inventory[i].name, "Wand") == 0) icon = WAND_ICON;
            else if (strcmp(inventory[i].name, "Arrow") == 0) icon = ARROW_ICON;
            else if (strcmp(inventory[i].name, "Sword") == 0) icon = SWORD_ICON;

            mvprintw(start_y + 2 + weapon_count, start_x, "%d. %s %s", weapon_count + 1, icon, inventory[i].name);
            weapon_count++;
        }
    }

    if (weapon_count == 0) {
        mvprintw(start_y + 2, start_x, "No weapons collected.");
    }

    mvprintw(start_y + 4 + weapon_count, start_x, "🪄 Spells:\n");
    int spell_count = 0;
    for (int i = 0; i < inventory_count; i++) {
        if (strcmp(inventory[i].type, "Spell") == 0) {
            const char* spell_icon = "";
            if (strcmp(inventory[i].name, "Speed") == 0) spell_icon = "🏃‍♂️";
            else if (strcmp(inventory[i].name, "Health") == 0) spell_icon = "❤️";
            else if (strcmp(inventory[i].name, "Damage") == 0) spell_icon = "🔥";

            mvprintw(start_y + 5 + weapon_count + spell_count, start_x, "%d. %s %s", spell_count + 1, spell_icon, inventory[i].name);
            spell_count++;
        }
    }

    if (spell_count == 0) {
        mvprintw(start_y + 5 + weapon_count, start_x, "No spells collected.");
    }

    // نمایش تعداد غذاها
    mvprintw(start_y + 7 + weapon_count + spell_count, start_x, "🍎 Food: %d", food_count);
    mvprintw(start_y + 8 + weapon_count + spell_count, start_x, "Press 'e' to eat food.");
    mvprintw(start_y + 9 + weapon_count + spell_count, start_x, "Press 'i' to exit.");

    refresh();

    int key;
    while ((key = getch()) != 'i') {  // منتظر فشردن 'i' برای خروج
        if (key == 'e') {
            if (food_count > 0) {
                food_count--;
                hunger += 20;
                if (hunger > 100) hunger = 100;
                player_hp += 10;
                if (player_hp > 40) player_hp = 40;

                mvprintw(start_y + 10 + weapon_count + spell_count, start_x, "You ate 🍎! HP: %d, Hunger: %d  ", player_hp, hunger);
            } else {
                mvprintw(start_y + 10 + weapon_count + spell_count, start_x, "No food left to eat.");
            }
            refresh();
        }
    }
    for (int i = 0; i < 15; i++) {
        mvprintw(start_y + i, start_x, "                              ");
    }
    refresh();
}
// تغییر در تابع move_character
void move_character(int *x, int *y, char *prev_cell) {
    int ch = getch();
    int new_x = *x, new_y = *y;

    // پاک کردن پیام‌های قبلی
    mvprintw(0, 0, "                                           ");
    strcpy(gold_message, "");

    if (waiting_for_direction) {
        switch (ch) {
            case 'h': start_continuous_move(-1, 0); break; // چپ
            case 'j': start_continuous_move(0, 1); break;  // پایین
            case 'k': start_continuous_move(0, -1); break; // بالا
            case 'l': start_continuous_move(1, 0); break;  // راست
        }
    } else {
        // حرکت بر اساس کلیدهای جهت
        switch (ch) {
            case 'j':    new_y--; break; // پایین
            case 'k':  new_y++; break;  // بالا
            case 'h':  new_x--; break;  // چپ
            case 'l': new_x++; break;  // راست
            case 'y': new_x--; new_y--; break; // بالا چپ
            case 'u': new_x++; new_y--; break; // بالا راست
            case 'b': new_x--; new_y++; break; // پایین چپ
            case 'n': new_x++; new_y++; break; // پایین راست
            case 'i': show_inventory(); break;
            case 'f': waiting_for_direction = 1; break; // شروع حرکت مداوم
        }
    }

    chtype next_cell = mvinch(new_y, new_x) & A_CHARTEXT;

    // 🍎 اگر بازیکن روی غذا برود
    if (next_cell == 'f') {
        if (food_count < 5) {  // فقط اگر کمتر از 5 غذا داشته باشیم
            food_count++;
            mvprintw(0, 0, "You picked up 🍎 Food! Total: %d", food_count);
            mvaddch(new_y, new_x, '.'); // حذف غذا از نقشه
            next_cell = '.';
        } else {
            mvprintw(0, 0, "You can't carry more food!");
        }
        refresh();
    }

    // طلای معمولی
    if (next_cell == '&') {
        mvaddch(new_y, new_x, '.');
        next_cell = '.';
        gold_count++;
        strcpy(gold_message, "You collected 💰!");
        mvprintw(0, 0, gold_message);
        refresh();
    }

    // طلای سیاه
    if (next_cell == 'B') {
        mvaddch(new_y, new_x, '.');
        next_cell = '.';
    }

    // تله
    if (next_cell == 'T') {
        mvaddch(new_y, new_x, '^');
        next_cell = '^';
    }

    // حرکت در مسیرهای مجاز
    if (next_cell == '.' || next_cell == '#' || next_cell == '+' || next_cell == '^' ||
        next_cell == 'M' || next_cell == 'S' || next_cell == 'D' || next_cell == 'A' || next_cell == 'W' ||
        next_cell == 'h' || next_cell == 'd' ||next_cell == 's' ) {
        mvaddch(*y, *x, *prev_cell); // حذف موقعیت قبلی
        *prev_cell = next_cell;
        *x = new_x;
        *y = new_y;
        mvaddch(*y, *x, '@'); // نمایش کاراکتر در موقعیت جدید
    }


    // سلاح‌ها (انتخابی)
    if (next_cell == 'M' || next_cell == 'S' || next_cell == 'D' || next_cell == 'A' || next_cell == 'W') {
        char weapon_name[ITEM_NAME_LENGTH];
        char weapon_icon[10];

        switch (next_cell) {
            case 'M': strcpy(weapon_name, "Mace"); strcpy(weapon_icon, MACE_ICON); break;
            case 'S': strcpy(weapon_name, "Sword"); strcpy(weapon_icon, SWORD_ICON); break;
            case 'D': strcpy(weapon_name, "Dagger"); strcpy(weapon_icon, DAGGER_ICON); break;
            case 'A': strcpy(weapon_name, "Arrow"); strcpy(weapon_icon, ARROW_ICON); break;
            case 'W': strcpy(weapon_name, "Wand"); strcpy(weapon_icon, WAND_ICON); break;
        }

        // نمایش پیام برای برداشتن سلاح
        mvprintw(0, 0, "Press 'y' to pick up %s %s", weapon_icon, weapon_name);
        refresh();

        // بررسی اینکه آیا کلید `y` در حرکت بعدی فشرده شده است یا خیر
        int key = getch();
        if (key == 'y') {
            add_to_inventory(weapon_name, "Weapon");
            mvaddch(new_y, new_x, '.'); // حذف سلاح از نقشه
            next_cell = '.';
            refresh();
        }
    }

    if (next_cell == 'd' || next_cell == 's' || next_cell == 'h') {
        char spell_name[ITEM_NAME_LENGTH];
        char spell_icon[20];

        switch (next_cell) {
            case 's': strcpy(spell_name, "speed"); strcpy(spell_icon, speed_ICON); break;
            case 'h': strcpy(spell_name, "health"); strcpy(spell_icon, health_ICON); break;
            case 'd': strcpy(spell_name, "damage"); strcpy(spell_icon, damage_ICON); break;
        }

        // نمایش پیام برای برداشتن سلاح
        mvprintw(0, 0, "Press 'y' to pick up %s %s", spell_icon, spell_name);
        refresh();

        // بررسی اینکه آیا کلید `y` در حرکت بعدی فشرده شده است یا خیر
        int key = getch();
        if (key == 'y') {
            add_to_inventory(spell_name, "Spell");
            mvaddch(new_y, new_x, '.'); // حذف سلاح از نقشه
            next_cell = '.';
            refresh();
        }
    }

    // حرکت در مسیرهای مجاز
    if (next_cell == '.' || next_cell == '#' || next_cell == '+' || next_cell == '^' ||
        next_cell == 'M' || next_cell == 'S' || next_cell == 'D' || next_cell == 'A' || next_cell == 'W' ||
        next_cell == 'h' || next_cell == 'd' ||next_cell == 's' ) {
        mvaddch(*y, *x, *prev_cell); // حذف موقعیت قبلی
        *prev_cell = next_cell;
        *x = new_x;
        *y = new_y;
        mvaddch(*y, *x, '@'); // نمایش کاراکتر در موقعیت جدید
    }
}
void show_gold_count() {
    mvprintw(1, 0, "\xF0\x9F\x92\xB0: %d ", gold_count); // نماد طلا
    refresh();
}


int main() {
    setlocale(LC_ALL, ""); // تنظیم محل برای پشتیبانی از یونیکد

    srand(time(NULL));
    initscr();
    noecho();
    cbreak();
    keypad(stdscr, TRUE);
    start_color(); // فعال کردن رنگ‌ها
    init_pair(1, COLOR_RED, COLOR_BLACK);  // رنگ قرمز برای تله‌ها
    init_pair(2, COLOR_YELLOW, COLOR_BLACK); // رنگ زرد برای طلا
    init_pair(3, COLOR_CYAN, COLOR_BLACK);
    init_pair(4, COLOR_MAGENTA, COLOR_BLACK);
    init_pair(5, COLOR_BLUE, COLOR_BLACK);
    init_pair(6, COLOR_GREEN, COLOR_BLACK);

    bkgd(COLOR_BLACK);  // تنظیم پس‌زمینه به مشکی

    initialize_trap_map();
    Room rooms[MAX_ROOMS];
    create_rooms(rooms, MAX_ROOMS);
    int black_gold_room_count = 0;

    for (int i = 0; i < MAX_ROOMS; i++) {
        draw_room(rooms[i], rooms, MAX_ROOMS);
        add_pillars(rooms[i]);
        place_window_in_room(&rooms[i], rooms, MAX_ROOMS);
        add_traps_to_room(&rooms[i]);
        add_gold_bag_to_room(&rooms[i]);
        add_black_gold_to_room(&rooms[i], &black_gold_room_count);
        add_mace_to_room(&rooms[i]);
        add_dagger_to_room(&rooms[i]);
        add_wand_to_room(&rooms[i]);
        add_arrow_to_room(&rooms[i]);
        add_sword_to_room(&rooms[i]);
        add_damage_to_room(&rooms[i]);
        add_health_to_room(&rooms[i]);
        add_speed_to_room(&rooms[i]);
        add_food_to_room(&rooms[i]);  // اضافه کردن غذا به اتاق‌ها

    }

    ensure_full_connectivity(rooms, MAX_ROOMS);
    int player_x = rooms[0].x + 1;
    int player_y = rooms[0].y + 1;
    char prev_cell = '.';
    mvaddch(player_y, player_x, '@');

    while (1) {
        move_character(&player_x, &player_y, &prev_cell);
        mvprintw(1, 0, " \U00002764️ HP: %d   🍖 Hunger: %d ", player_hp, hunger);
        hunger -= 1;
        if (hunger < 0) hunger = 0;

        // اگر گرسنگی به 0 برسد، بازیکن جان کم می‌کند
        if (hunger == 0) {
            player_hp -= 1;
            if (player_hp <= 0) {
                mvprintw(LINES / 2, COLS / 2 - 5, "💀 GAME OVER 💀");
                refresh();
                getch();
                break;
            }
        }
        show_gold_count();
        refresh();
    }

    getch();
    endwin();
    return 0;
}
